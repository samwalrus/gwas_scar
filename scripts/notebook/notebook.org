#+STARTUP: latexpreview
#+TITLE: Genome Wide Association Study of Scar Size in ALSPAC
#+AUTHOR: Sam Neaves

* About

This notebook is written as an [[https://orgmode.org][emacs Org file]] and exported into HTML
and PDF formats. 
Org files are plain text and can be viewed with any plain text file
viewer. 
In addition if the file is opened in [[https://www.gnu.org/software/emacs/][emacs]], interactive features of
running the code in the code blocks can be performed using a feature called
[[https://orgmode.org/worg/org-contrib/babel/][org babel]].
The GIT hub repository for this project is https://github.com/samwalrus/gwas_scar. 
This contains a record of previous versions of the notebook as it has
been developed for transparency. 
Code blocks are in Bash, R and Prolog (only the subset required for
defining makeprog files for[[https://github.com/evoldoers/biomake][ Biomake]] )
The programming style of mixing prose and code blocks in notebooks is
a type of [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]].

This notebook and associated code can be read in a number of ways.
Firstly it can be read as a fixed record of the code that was run and the
results obtained at the time on the hardware used by myself.
Secondly it can be run interactively step by step where a reader is
able to modify code blocks to explore the coded parameter space as well
as add or remove lines of code.
Thirdly it can be read as instructions to run the code as part
of a pipeline.
This can be done by 'tangling' the src_code blocks into source files
which can then be run in a biomake pipeline to  'make' the resulting
figures and output files from the raw data files.

** Initial Setup for interactive code.

The code in this notebook is designed to be open and rerun-able. 
Some aspects of running code on a particular system at a particular
time may need to be modified.
The following instruction give details on how this code was run to
produce this document.

This code was run on two machines, due to how the data and compute are
currently organised in Bristol.
This means that the rcode in this notebook will either be directed at
a local session or a remote session.
Each source code block will be labeled in order with the appropriate
session for this to work.
The code for each session needs to run sequentially due to the
procedural nature of the code.
Running a code block from one session out of sequential order might
lead to unexpected results.

The first part of the code is run on a macbook laptop which is able to
connect to the local SMB drive where ALSPAC phenotype data is stored.
This code extracts the relevant variables and writes these to a file
which is then copied onto the second machine which is part of the
university of Bristol HPC facilities.

To set up the first part of the code to run interactively on the local machine first connect to
the ALSPAC data store using the SMB server (as documented at..).
(If working remotely the VPN will need to be on). 
Then:
1. open this .org file in emacs
2. open a local shell in emacs (M-x shell)
3. Navigate to your local working directory 
4. Start R.

Use the org babel commands to run an execute this code.


The rest of the code is run on the University of Bristol (UOB) high
performance computer (HPC).
As of the summer of 2022, the current HPC machine at UOB is Blue
Crystal Phase 4 (BC4). 
BC4 uses the slurm job scheduler in order to fairly share the compute
resources. 
The compute resources in HPC machines are commonly controlled by login
nodes that then utilize compute nodes.
To run the R code in this note book interactively on BC4 you need to
start an interactive job with slurm to do this you
need to:
1. Open this .org file in emacs.
2. Open a shell (M-x shell) on BC4 over [[https://www.emacswiki.org/emacs/TrampMode][tramp]].
3. Start an interactive slurm job on BC4 [[ijob]]
4. Navigate to your working directory
5. Start R in this shell and run `M-x ess-remote` to connect to the
   ess session.

Make sure the two emacs buffers with R sessions are named as the
session variables in the babel src_code blocks.This notebook assume  /*shell* for the local
machine and *shell*<2> for the remote machine.

The code to start an interactive job is:

#+NAME: ijob
#+PROPERTY: header-args :eval never-export
#+BEGIN_SRC bash
srun --nodes=1 --ntasks-per-node=1 --mem=10G --time=08:00:00 --pty bash -i
#+END_src



In order to insert images directly into the org file make sure you
have run the following emacs commands.

#+BEGIN_SRC lisp
(setq org-confirm-babel-evaluate nil)
(add-hook 'org-babel-after-execute-hook 'org-display-inline-images)   
(add-hook 'org-mode-hook 'org-display-inline-images)  

#+END_SRC 

* Aim of the analysis

This analysis is part of the study of genetics of scaring using the
ALSPAC cohort.

** Background

When tissues are damaged in a human any time after birth a complex
wound healing process takes places which results in fibrotic scars. 
These scars can lead to loss of function in the tissue. 
The most severe cases might be skin contraction or organ failure.
For example heart failure after a heart attack.
The precise molecular mechanisms underlying the wound healing process
and scar formation is not well
understood.
This means that there are a lack of effective treatments.

Most of what is known about scar formation has been discovered using
animal models because studying scars in humans is difficult due to to
the unethical nature of delivering standard wounds to people.
The observational studies that have been conducted have mostly been in
burn wounds and these have suggested differences in race suggesting
genetic factors may have an impact.

In this work we attempt to overcome some of the difficulties in human
studies by looking at standard wounds.
This is done by using longitudinal cohort data from the Avon longitudal
parents and children study.
Specifically we look at participants who have had Bacillus
Calmette–Guérin (BCG) vaccinations
which have resulted in scars.
The BCG vaccination is primarily used against tuberculosis.
It often causes a fairly standardized scar due to the routine nature
of the administration of the scar.
In ALSPAC the longest axis of the scar was measured in millimeters, as
well as the age of the scar and the field worker who measured the scar.

* Getting the Phenotype data.

We first need to pull the phenotype and co-var data from the ALSPAC
data store using the R alspac library write this to a file. 
The following code needs to be run in the local R session that is on a
machine that can connect to the 'smb' drive.

The variables that we need to extract are:

1. Fieldworker for BCG session: [[https://discovery.closer.ac.uk/item/uk.alspac/586cdfc0-9d9b-42d7-a191-6d54ea64aab5][fm4bc001]] 
2. Participant remembers having BCG injection:[[https://discovery.closer.ac.uk/item/uk.alspac/5541594d-ca18-4b6d-9c91-c5022d8f0063][fm4bc020]]
3. Age participant had BCG (years):[[https://discovery.closer.ac.uk/item/uk.alspac/99c08293-3f88-4bd1-b3e3-5ecf8906f414][fm4bc021]]
4. Bcg scar present:[[https://discovery.closer.ac.uk/item/uk.alspac/32640a73-a2b8-4f96-9bab-fa0c31d0fdf6][fm4bc022]]
5. Size of scar (mm):[[https://discovery.closer.ac.uk/item/uk.alspac/dbe1bfce-67e5-4fd8-9e48-6bd3e15a3da4][fm4bc023]]
6. Description of scar:[[https://discovery.closer.ac.uk/item/uk.alspac/d80de95d-0d92-474e-a6dd-27034a1db566][fm4bc024]]
7. Color of scar:[[https://discovery.closer.ac.uk/item/uk.alspac/b130b42c-6100-4d5a-8b25-d98ed24a4a8d][fm4bc025]]



*Local R session*
#+NAME: get_vars
#+BEGIN_SRC R :session *shell* :results output :tangle get_pheno.R
  library(devtools)
  ### library(alspac is available from: https://github.com/explodecomputer/alspac)
  library(alspac)
  setDataDir("/Volumes/ALSPAC-Data/")
  data(current)
  data(useful)


  ### Fieldworker for BCG session: FOM4
  ### fm4bc001

  ### Participant remembers having BCG injection: FOM4
  ### fm4bc020

  ### Age participant had BCG (years): FOM4
  ### fm4bc021

  ### Bcg scar present
  ### fm4bc022

  ### size of scar (mm)
  #### fm4bc023

  ### Description of scar
  ### fm4bc024

  ### Color of scar
  ### fm4bc025

  varnames <- c("fm4bc001","fm4bc020","fm4bc021","fm4bc022","fm4bc023", "fm4bc024","fm4bc025")
  vars <- findVars(varnames)
  results <- extractVars(vars)

  write.csv(as.data.frame(results),file="./pheno1.csv")

#+END_SRC

#+RESULTS: get_vars
#+begin_example
Loading required package: usethis
Loading required package: readstata13
Loading required package: haven
Loading required package: stringr
Loading required package: plyr
Loading required package: dplyr

Attaching package: ‘dplyr’

The following objects are masked from ‘package:plyr’:

    arrange, count, desc, failwith, id, mutate, rename, summarise,
    summarize

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: parallel
R/alspac version 0.33.0
We have made several changes to how the extractVars function works.
This may lead to slightly different formatting compared to previously.
See also the new createDictionary function.
Warning message:
package ‘dplyr’ was built under R version 4.0.5
Starting extraction from 1 files in the ALSPAC data directory
Extracting from: /Volumes/ALSPAC-Data//Current/Clinic/Adult//FOM4_3b.dta
Collapsing data
Starting extraction from 7 files in the ALSPAC data directory
Extracting from: /Volumes/ALSPAC-Data//Current/Quest/Mother//a_3e.dta
Extracting from: /Volumes/ALSPAC-Data//Current/Quest/Mother//b_4f.dta
Extracting from: /Volumes/ALSPAC-Data//Useful_data/bestgest//bestgest.dta
Extracting from: /Volumes/ALSPAC-Data//Current/Quest/Mother//c_8a.dta
Extracting from: /Volumes/ALSPAC-Data//Current/Other/Cohort Profile//cp_2b.dta
Extracting from: /Volumes/ALSPAC-Data//Current/Other/Sample Definition//kz_5c.dta
Extracting from: /Volumes/ALSPAC-Data//Current/Other/Sample Definition//mz_5a.dta
Collapsing data
Automatically removing data for individuals who have withdrawn consent.
#+end_example



This file then needs to be moved to the BC4 working directory

#+NAME: move_pheno
#+PROPERTY: header-args :eval never-export
#+BEGIN_SRC bash
mv $(LocalPath)/$(Phenofile) $(HPCPath)/$(Phenofile)
#+END_src

* Exploring Phenotype data

** Reading the file into R

#+BEGIN_SRC R :session *shell*<2> :results output :exports both

  raw_pheno <-read.csv('../../alspac_pheno_raw/pheno1.csv')


#+END_SRC


** Excluding people
Participants without scars are excluded.


#+BEGIN_SRC R :session *shell*<2> :results output :exports both
  library(dplyr)
  dim(raw_pheno)

  pheno_with_scar_raw <-raw_pheno %>% filter(fm4bc022==1)

  dim(pheno_with_scar_raw)
  
#+END_SRC
Code output:
#+RESULTS:
#+begin_example
library(dplyr)

Attaching package: 'dplyr'

The following objects are masked from 'package:stats':

    filter, lag

The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union
dim(raw_pheno)
[1] 15645    37

pheno_with_scar_raw <-raw_pheno %>% filter(fm4bc022==1)

dim(pheno_with_scar_raw)
[1] 971  37
#+end_example



** Remove duplicates
Because the alspac R library merges childrens data we will get
multiple rows that correspond to a single mother. With a qlet B and A.
So we need to filter out the B qlet data.

#+BEGIN_SRC R :session *shell*<2> :results output :exports both
  dim(pheno_with_scar_raw)
  length(unique(pheno_with_scar_raw$aln))

  pheno_with_scar <-pheno_with_scar_raw %>% filter(qlet=="A")

  dim(pheno_with_scar)
  length(unique(pheno_with_scar$aln))


#+END_SRC

#+RESULTS:
#+begin_example
dim(pheno_with_scar_raw)
[1] 971  37
length(unique(pheno_with_scar_raw$aln))
[1] 958

pheno_with_scar <-pheno_with_scar_raw %>% filter(qlet=="A")

dim(pheno_with_scar)
[1] 958  37
length(unique(pheno_with_scar$aln))
[1] 958
#+end_example


** Examining scar size 
*** summary

#+BEGIN_SRC R :session *shell*<2> :results output :exports both
  summary(pheno_with_scar$fm4bc023)
#+END_SRC

#+RESULTS:
: summary(pheno_with_scar$fm4bc023)
:    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
:  -1.000   4.000   5.000   6.295   8.000  35.000


*** plot

#+BEGIN_SRC R :file scar_size_raw_plot.png :results output graphics :session *shell*<2> :exports both
library(ggplot2)
library(cowplot)

theme_set(theme_cowplot())
p1 <- ggplot(pheno_with_scar,aes(fm4bc023)) +
geom_histogram(fill = "darkblue",
na.rm = TRUE)
print(p1)



#+END_SRC

#+RESULTS:
[[file:scar_size_raw_plot.png]]

*** inverse rank transform summary and plot

We inverse rank transform the scar measurement residuals because this
results in a normally distributed quantitive trait.

#+BEGIN_SRC R :session *shell*<2> :results output :exports both
  #install.packages("RNOmni")
  library(RNOmni)

  pheno_with_scar$scar_size_rank_transform <-RankNorm(pheno_with_scar$fm4bc023)  

  summary(pheno_with_scar$scar_size_rank_transform)
#+END_SRC

#+RESULTS:
: #install.packages("RNOmni")
: library(RNOmni)
: 
: pheno_with_scar$scar_size_rank_transform <-RankNorm(pheno_with_scar$fm4bc023)
: 
: summary(pheno_with_scar$scar_size_rank_transform)
:      Min.   1st Qu.    Median      Mean   3rd Qu.      Max. 
: -3.214996 -0.732923 -0.185475  0.006158  0.714230  3.214996



(Using the package from: Operating characteristics of the rank-based
inverse normal transformation for quantitative trait analysis in
genome-wide association studies: https://pubmed.ncbi.nlm.nih.gov/31883270/)

#+BEGIN_SRC R :file scar_size_inverse_rank_transform_plot.png :results output graphics :session *shell*<2> :exports both
library(ggplot2)
library(cowplot)

theme_set(theme_cowplot())
p1 <- ggplot(pheno_with_scar,aes(scar_size_rank_transform)) +
geom_histogram(fill = "darkblue",
na.rm = TRUE)
print(p1)

#+END_SRC

#+RESULTS:
[[file:scar_size_inverse_rank_transform_plot.png]]


*** Writing to file

We need to create our new fam file that has the phenotype data.


#+BEGIN_SRC R :session *shell*<2> :results output :exports both
  fam_original <- read.table("combined.fam")


  ### Change the qlet to M. (From A or B)
  pheno_with_scar$alnqlet_m <- paste(pheno_with_scar$aln,"M",sep="")

  library(dplyr)

  new_fam_all = fam_original %>% left_join(pheno_with_scar,by = c("V1" = "alnqlet_m"))

  new_fam <- new_fam_all[c("V1","V2","V3","V4","V5","scar_size_rank_transform")]
  new_fam[is.na(new_fam)] <- -9
  summary(new_fam[,c("scar_size_rank_transform")])
  write.table(new_fam,"scar.fam", row.names=FALSE, col.names=FALSE, quote=FALSE)


#+END_SRC

#+RESULTS:
#+begin_example
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 -9.000  -9.000  -9.000  -8.638  -9.000   3.219
#+end_example

* Genetic data

** HRC data

We want to use the [[HRC data][HRC data]].
These need to be in the correct format for Gemma.

Simon used the bimbam mean genotype file format (mgf).
We are initially using plink format files.

*** TODO check the plink file format of hrc is best guess or dossage? I think best guess in plink.



* Running GWASes with Gemma

Todo this we are going to tangle a biomake file with rules for how to
execute Gemma, including the dependencies. The emacs command to
perform a tangle is C-c C-v t whilst point is in the code block.

We can then execute the recipes in the make file over slurm in compute
jobs.


** Aim compute the p-values to assess support for association between scar length and SNPs on chromosomes 1–22.

1. Run a basic association analysis in GEMMA.
2. Run an LMM-based association analysis in GEMMA.
3. Compare the two association analyses.

** Basic association

For the first basic association we do not have any covars and use the
gemma -lm 1 option which performs a Wald test.
Create the rule:

#+PROPERTY: header-args :eval never-export
#+BEGIN_SRC prolog :tangle makeprog
'./output/scar2.assoc.txt',{QsubArgs = '--time=18:00:00'}<--
['scar.bed','scar.bim','scar.fam'],'../../gemma -b scar -lm 1 -outdir . -o ./output/scar2'.

'./output/scar2.log.txt' <--['./output/scar2.assoc.txt'],{true}.

[gemma_basic] <--['./output/scar2.log.txt'].
#+END_SRC

We can evoke a dry run of the recipes to check the commands 

#+BEGIN_SRC bash :results output

biomake -n gemma_basic

#+END_SRC

#+RESULTS:
:   ../../gemma -b scar -lm 1 -outdir . -o ./output/scar2
: Target gemma_basic not materialized - build required


Evoke the recipes as submitted jobs on bc4 with slurm.
#+BEGIN_SRC bash :results output

biomake -Q slurm gemma_basic

#+END_SRC


#+RESULTS:
: Submitting job: sbatch -o /user/work/sn0550/gwas_scar/scripts/notebook/output/.biomake/slurm/out/scar2.assoc.txt -e /user/work/sn0550/gwas_scar/scripts/notebook/output/.biomake/slurm/err/scar2.assoc.txt   --time=18:00:00  --parsable /user/work/sn0550/gwas_scar/scripts/notebook/output/.biomake/slurm/script/scar2.assoc.txt >/user/work/sn0550/gwas_scar/scripts/notebook/output/.biomake/slurm/job/scar2.assoc.txt
: Submitting job: sbatch -o /user/work/sn0550/gwas_scar/scripts/notebook/output/.biomake/slurm/out/scar2.log.txt -e /user/work/sn0550/gwas_scar/scripts/notebook/output/.biomake/slurm/err/scar2.log.txt    --dependency=afterok:10665035 --parsable /user/work/sn0550/gwas_scar/scripts/notebook/output/.biomake/slurm/script/scar2.log.txt >/user/work/sn0550/gwas_scar/scripts/notebook/output/.biomake/slurm/job/scar2.log.txt
: Target gemma_basic not materialized - build required
: Killing previous job: scancel   10526927
: Submitting job: sbatch -o /user/work/sn0550/gwas_scar/scripts/notebook/.biomake/slurm/out/gemma_basic -e /user/work/sn0550/gwas_scar/scripts/notebook/.biomake/slurm/err/gemma_basic    --dependency=afterok:10665036 --parsable /user/work/sn0550/gwas_scar/scripts/notebook/.biomake/slurm/script/gemma_basic >/user/work/sn0550/gwas_scar/scripts/notebook/.biomake/slurm/job/gemma_basic
: Target gemma_basic queued for rebuild

** LMM association

We next run a linear mixed model association analysis.

*** Releated matrix

To do this we first need to create create the standardized relatedness matrix using Gemma option:
“-gk 2” .

[[matrix_eq.png]]

This is using the full same data.
#+BEGIN_SRC prolog :tangle makeprog
'matrix_full_scar.sXX.txt',{QsubArgs = '--time=72:00:00'} 
<--['scar.bed','scar.bim','scar.fam'],'../../gemma -bfile scar -gk 2 -o matrix_full_scar'.

#+END_SRC

This is using the filtered hapmap data

Need to remove -9 from last col of plink file
#+BEGIN_SRC  bash
sed -i 's/\S*$/0/' data.fam
#+END_SRC


#+BEGIN_SRC prolog :tangle makeprog
'matrix_full.sXX.txt',{QsubArgs = '--time=72:00:00'} 
<--[],'../../gemma -bfile data -gk 2 -o matrix_full'.

#+END_SRC

#+BEGIN_SRC bash :results output

biomake -n matrix_full.sXX.txt

#+END_SRC


#+RESULTS:
: Target matrix_full.sXX.txt not materialized - build required
: ../../gemma -bfile scar -gk 2 -o matrix_full

Evoke the recipes as submitted jobs on bc4 with slurm.
#+BEGIN_SRC bash :results output

biomake -Q slurm matrix_full.sXX.txt

#+END_SRC

#+RESULTS:
: Target matrix_full.sXX.txt not materialized - build required
: Killing previous job: scancel   10507884
: Submitting job: sbatch -o /user/home/sn0550/scar/GWAS_scar_size/gwas_scar/scripts/notebook/.biomake/slurm/out/matrix_full.sXX.txt -e /user/home/sn0550/scar/GWAS_scar_size/gwas_scar/scripts/notebook/.biomake/slurm/err/matrix_full.sXX.txt   --time=18:00:00  --parsable /user/home/sn0550/scar/GWAS_scar_size/gwas_scar/scripts/notebook/.biomake/slurm/script/matrix_full.sXX.txt >/user/home/sn0550/scar/GWAS_scar_size/gwas_scar/scripts/notebook/.biomake/slurm/job/matrix_full.sXX.txt
: Target matrix_full.sXX.txt queued for rebuild

Rule for running linear mixed model using the Wald test (Gemma option -llm 1).

#+BEGIN_SRC prolog :tangle makeprog
'./output/scar_lmm.assoc.txt',{QsubArgs = '--time=36:00:00'} 
<--['scar.bed','scar.bim','scar.fam','./output/matrix_full.sXX.txt'],
'../../gemma -bfile scar -k ./output/matrix_full.sXX.txt -lmm 1 -o scar_lmm'.

'./output/scar_lmm.log.txt' <--['./output/scar_lmm.assoc.txt'],{true}.

#+END_SRC

#+BEGIN_SRC bash

biomake -n ./output/scar_lmm.assoc.txt

#+END_SRC

#+RESULTS:
| Target      | ./output/scar_lmm.assoc.txt | not  | materialized |                            0 | build | required |    |          |
| ../../gemma | -bfile                      | scar | -k           | ./output/matrix_full.sXX.txt | -lmm  |        1 | -o | scar_lmm |


* Exploring the results

** Manhatten plot

Using the functions.R file from the Gemma tutorial for the function to
make a manhatten plot. (This has been modifed to work with 23 chr and
to print the p_wald results).
#+BEGIN_SRC R :file manhatten.png :results output graphics :session *shell*<2> :exports both
library(ggplot2)
library(cowplot)
gwscan <- read.table("./output/scar2.assoc.txt", as.is = "rs",header = TRUE)
theme_set(theme_cowplot())
source("functions.R")
p1 <- plot.gwscan(gwscan)
print(p1)


#+END_SRC

#+RESULTS:
[[file:manhatten.png]]


#+BEGIN_SRC R :file manhatten_lmm.png :results output graphics :session *shell*<2> :exports both
library(ggplot2)
library(cowplot)
gwscan2 <- read.table("./output/scar_lmm.assoc.txt", as.is = "rs",header = TRUE)
theme_set(theme_cowplot())
source("functions.R")
p2 <- plot.gwscan(gwscan2)
print(p2)


#+END_SRC

#+RESULTS:
[[file:manhatten_lmm.png]]

The two manhatten plots look very similar.

** Zoom in on chr and region

The region that has the highest snp in the lmm is manhatten is chr16.
We can zoom in to plot this region and look more closely at the strongest association signal on
chromosome 16. First, create a data frame with the results for
chromosome 16 only:


#+BEGIN_SRC R :session *shell*<2> :results output :exports both

gwscan_chr16 <- subset(gwscan,chr == 16)
#+END_SRC

#+RESULTS:
: 
: gwscan_chr16 <- subset(gwscan,chr == 16)

Next, plot the p-values against the base-pair position of the
SNPs.

#+BEGIN_SRC R :file ch16_lmm_manhatten.png :results output graphics :session *shell*<2> :exports both
library(ggplot2)
library(cowplot)

p3 <- plot.region.pvalues(gwscan_chr16)
print(p3)

#+END_SRC

#+RESULTS:
[[file:ch16_lmm_manhatten.png]]


** Snp with highest association



The strongest association signal is isolated to
positions of 25-30 Mb. Zooming in on that region:
#+BEGIN_SRC R :file chr16_zoom.png :results output graphics :session *shell*<2> :exports both

dat <- subset(gwscan_chr16,ps > 25e6 & ps < 30e6)
p3 <- plot.region.pvalues(dat)
print(p3)
#+END_SRC

#+RESULTS:
[[file:chr16_zoom.png]]


We can find the actual SNP with the highest association from the LMM
gwas with.

#+BEGIN_SRC R :session *shell*<2> :results output :exports both
i <- which.min(gwscan$p_wald)
gwscan[i,]
#+END_SRC

#+RESULTS:
: i <- which.min(gwscan$p_wald)
: gwscan[i,]
:         chr        rs       ps n_miss allele1 allele0    af       beta
: 5681051  16 rs3093361 27453796      4       C       T 0.084 -0.4575414
:                 se  logl_H1    l_remle      p_wald
: 5681051 0.09220935 -969.514 0.02129142 8.75014e-07



We have thus identified the SNP that is most strongly associated
with scar size.
Next, we can then examine the relationship between scar size and
the genotype at this SNP.

** load genotype

#+BEGIN_SRC R :session *shell*<2> :results output :exports both

pheno <- read.table("scar.fam")
#+END_SRC

#+RESULTS:
: 
: pheno <- read.table("scar.fam")

Use Plink to extract the genotypes for the top SNP and write as text
file.


#+BEGIN_SRC prolog :tangle makeprog
'top_snp.ped', {SNP='rs3093361'} 
<--['scar.bed','scar.bim','scar.fam'],
'plink --bfile scar -snp rs3093361 --recode -out top_snp'.

'top_snp.map'<--['top_snp.ped'],{true}.


#+END_SRC

#+BEGIN_SRC bash

biomake -n top_snp.map

#+END_SRC

We then convert the genotype file to a dossage format.

#+BEGIN_SRC R :session *shell*<2> :results output :exports both
  ped_table <- read.table("top_snp.ped")

  ped_table[ped_table == "C"] <- 1
  ped_table[ped_table == "T"] <- 0

  ped_table$V7_2 <- as.numeric(ped_table$V7)

  ped_table$V8_2 <- as.numeric(ped_table$V8)

  ped_table$dossage <- rowSums(ped_table[,c("V7_2","V8_2")])

  ped_table$dossage_factor <- as.factor(ped_table$dossage)

#+END_SRC

#+RESULTS:
: ped_table <- read.table("top_snp.ped")


If we convert the genotype to a “factor”, we can visualize the
relationship with a boxplot.

C is the alternative allele, so a 2 corresponds to genotype “CC”.

** Box plot

We can plot this as a box plot.

#+BEGIN_SRC R :file box_plot.png :results output graphics :session *shell*<2> :exports both
library(ggplot2)
library(cowplot)

levels(ped_table$dossage_factor) <- c("TT","CT","CC")

pdat <- data.frame(dossage_factor = ped_table$dossage_factor,x = ped_table$V6)


pdat <-pdat %>% filter(x> -8.000)

p5 <- ggplot(pdat,aes(dossage_factor, x)) +
geom_boxplot(na.rm = TRUE)

print(p5)

#+END_SRC

#+RESULTS:
[[file:box_plot.png]]

This provides a visual summary of the genotype-phenotype relationship. 


** Quantify relationship with linear model

#+BEGIN_SRC R :session *shell*<2> :results output :exports both
fit <- lm(y ~ x,data.frame(x = pdat$dossage_factor,
y = pdat$x))
summary(fit)

#+END_SRC

#+RESULTS:
#+begin_example
fit <- lm(y ~ x,data.frame(x = pdat$dossage_factor,
+ y = pdat$x))
summary(fit)

Call:
lm(formula = y ~ x, data = data.frame(x = pdat$dossage_factor, 
    y = pdat$x))

Residuals:
    Min      1Q  Median      3Q     Max 
-3.2767 -0.7946 -0.2472  0.6525  3.1533 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)    
(Intercept)  0.06170    0.03910   1.578    0.115    
xCT         -0.50498    0.09854  -5.125 3.85e-07 ***
xCC         -0.32260    0.47806  -0.675    0.500    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 0.9529 on 706 degrees of freedom
Multiple R-squared:  0.03621,	Adjusted R-squared:  0.03348 
F-statistic: 13.26 on 2 and 706 DF,  p-value: 2.218e-06
#+end_example


As this result is differnt from what we expected as we have not
identified the SNP rs61887838. We also extract this as see what this
looks like in the data


 #+BEGIN_SRC prolog :tangle makeprog
'snp_rs61887838.ped', {SNP='rs61887838'} 
<--['scar.bed','scar.bim','scar.fam'],
'plink --bfile scar -snp rs61887838 --recode -out top_snp'.

'snp_rs61887838.map'<--['snp_rs61887838.ped'],{true}.


#+END_SRC


#+BEGIN_SRC bash :results output

biomake snp_rs61887838.map

#+END_SRC

#+RESULTS:

Error: --snp variant 'rs61887838' not found.


Because the snp we wanted to find is not in the data we need to use a
differnt version of hrc.

We will use the the dossage bimbam format of the alspac hrc data.

We assume that the order of the bim bam files is the same as the bgen
files.
So we can you the .sample file as the starting point for making the
phenotype file.
Missing phenotype is set to NA.


#+BEGIN_SRC R :session *shell*<2> :results output :exports both

  scar_fam <- read.table('scar.fam')


  sample_file <- read.table('/mnt/storage/private/alspacdata/freeze/original/gi_hrc_g0m_g1/data/bgen/data.sample')

  sample_file_no_head <- sample_file[-c(1,2),]

  merged <- merge(sample_file_no_head, scar_fam, by.x ="V1", by.y="V1",all.x =TRUE)

  pheno_na <- replace(merged$V6.y, merged$V6.y ==-9, 'NA')


  ### set -9 to NA

  write.table(pheno_na, file="pheno.txt")


#+END_SRC




#+BEGIN_SRC prolog :tangle makeprog

bim_bam_path('/mnt/storage/private/alspacdata/freeze/original/omics_freeze_creation/scripts/make_gi_hrc_g0m_g1/bimbam/').
'./output/scar_lmm_bim_bam_chr$(CHR).assoc.txt',{QsubArgs = '--time=36:00:00', bim_bam_path(P)} 
<--[],
'../../gemma -g $(P)data_$(CHR).mgf -p pheno.txt  -k ./output/matrix_full.sXX.txt -lmm 1 -o scar_lmm_bim_bam_chr$(CHR)'.

'./output/scar_lmm_bim_bam_chr$(CHR).log.txt' <--['./output/scar_lmm_bim_bam_chr$(CHR).assoc.txt'],{true}.

#+END_SRC



#+END_SRC


#+BEGIN_SRC R :file manhatten_lmm_11.png :results output graphics :session *shell*<2> :exports both
  library(ggplot2)
  library(cowplot)
  gwscan2 <- read.table("./output/scar_lmm_bim_bam_chr11.assoc.txt", as.is = "rs",header = TRUE)
  theme_set(theme_cowplot())
  source("functions.R")
  p_lmm_11 <- plot.gwscan(gwscan2)
  print(p_lmm_11)


#+END_SRC


#+BEGIN_SRC R :session *shell*<2> :results output :exports both
i <- which.min(gwscan2$p_wald)
gwscan2[i,]
#+END_SRC 

#+RESULTS:
: i <- which.min(gwscan2$p_wald)
: gwscan2[i,]
:       chr          rs ps n_miss                 allele1 allele0   af      beta
: 95979  -9 11:29802521 -9      0 11:29802521:11:29802521       C 0.06 0.4877183
:              se   logl_H1 l_remle       p_wald
: 95979 0.1153385 -972.7948   1e-05 2.660648e-05

This is not the snp found in the original study.

In order to look that up I need to run gwas with anno or find the position.
#+BEGIN_SRC R :session *shell*<2> :results output :exports both
## code to see the pwald value of the snp we expect.
#+END_SRC 

Lets look at the data from leila and do a linear model and box plot of
these.



#+BEGIN_SRC R :file leila1.png :results output graphics :session *shell*<2> :exports both
  library(ggplot2)
  library(haven)
  library(tidyverse)

  dataframe <- read_dta('/user/work/sn0550/gwas_scar/scripts/hit_snp/bcg_pheno_ids_geno_merge.dta')


  withcid <- subset(dataframe, !is.na(dataframe[,2]))

  fit_pheno3 <- lm(y ~ x,data.frame(x = dataframe$snp,y = dataframe$pheno3_invrt))
  summary(fit_pheno3)

  fit_pheno2 <- lm(y ~ x,data.frame(x = dataframe$snp,y = dataframe$pheno2_invrt))
  summary(fit_pheno2)

  fit_pheno1 <- lm(y ~ x,data.frame(x = dataframe$snp,y = dataframe$pheno1_invrt))
  summary(fit_pheno1)

  library(cowplot)

  withcid_no_blank <- subset(withcid, snp != "")

  withcid_no_blank$factor_snp <- as.factor(withcid_no_blank$snp)

  summary(withcid_no_blank$factor_snp)

  levels(withcid_no_blank$factor_snp) <- c("00","GA","AA")

   pdat <- data.frame(factor_snp = withcid_no_blank$factor_snp,pheno3_invrt = withcid_no_blank$pheno3_invrt)


   #pdat <-pdat %>% filter(x> -8.000)

   leila1 <- ggplot(pdat,aes(factor_snp, pheno3_invrt)) +
   geom_boxplot(na.rm = TRUE)

   print(leila1)


#+END_SRC

#+RESULTS:
[[file:leila1.png]]


* TODO Plot the other two phenotypes as box plots.

* TODO Merge leilas data with mine and compare genotypes and phenotype values to understand if merge is the problem.





